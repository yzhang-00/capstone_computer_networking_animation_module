/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.4.0
 * Thu, 16 Nov 2023 03:43:41 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var r1_ethernet, r1_IP, pc1_application, pc1_tcp, pc7_application, r2_ethernet, pc1_IP, pc7_tcp, r2_IP, pc1_ethernet, pc7_IP, pc7_ethernet;

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// batchGeometry puzzle
function batchGeometry(objSelector) {
    var objNames = retrieveObjectNames(objSelector);
    var meshObjs = [];

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        obj.resolveMultiMaterial().forEach(function(objR) {
            if (objR.isMesh && objR.geometry)
                meshObjs.push(objR);
        });

    }

    if (meshObjs.length >= 2)
        v3d.BufferGeometryUtils.batchMeshes(meshObjs, appInstance.scene);

}

function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

// createCSSRule puzzle
function createCSSRule(cssRule, cssRuleCont, isParent, mediaRule) {
    var style = document.createElement('style');
    style.type = 'text/css';
    if (mediaRule) {
        style.innerHTML = `@media ${mediaRule} { ${cssRule} { ${cssRuleCont} } }`;
    } else {
        style.innerHTML = `${cssRule} { ${cssRuleCont} }`;
    }

    var styles = (isParent) ? parent.document.getElementsByTagName('head')[0] :
                              document.getElementsByTagName('head')[0];
    styles.appendChild(style)
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {

    var win = isParent ? window.parent : window;

    var elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    var targetElem = getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }
    }
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// bindHTMLObject puzzle
_pGlob.bindHTMLCallbackInfo = [];

function bindHTMLObject(objName, id, isParent) {
    if (!objName)
        return;
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var projected = new v3d.Vector3();
    elem.style.top = 0;
    elem.style.left = 0;
    function bindHTMLUpdateCb() {
        var camera = appInstance.getCamera(true);
        camera.updateMatrixWorld();
        obj.getWorldPosition(projected).project(camera);

        var isBehindCamera = false;
        var farNearCoeff = (camera.far + camera.near) / (camera.far - camera.near);
        if (camera.isPerspectiveCamera) {
            isBehindCamera = projected.z > farNearCoeff;
        } else if (camera.isOrthographicCamera) {
            isBehindCamera = projected.z < -farNearCoeff;
        }

        if (isBehindCamera) {
            // behind the camera, just move the element out of the sight
            projected.x = projected.y = -1e5;
        } else {
            projected.x = (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
            projected.y = (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
        }

        elem.style.transform = "translate(" + projected.x + "px, " + projected.y + "px)";
    }

    _pGlob.bindHTMLCallbackInfo.push({
        elem: elem,
        obj: obj,
        callback: bindHTMLUpdateCb
    });

    appInstance.renderCallbacks.push(bindHTMLUpdateCb);
    if (PL.editorRenderCallbacks)
        PL.editorRenderCallbacks.push([appInstance, bindHTMLUpdateCb]);
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}


batchGeometry(['ALL_OBJECTS']);

handleAnnot(true, 'SW1', 'SW1_annotation', 'I\'m a switch!', 'sw_1', undefined);
handleAnnot(true, 'SW2', 'SW2_annotation', 'I\'m a switch!', 'sw_2', undefined);
handleAnnot(true, 'SW4', 'SW4_annotation', 'I\'m a switch!', 'sw_4', undefined);

handleAnnot(true, 'PC1', 'PC1_annotation', '(TODO: routing_table)', 'pc_1', undefined);
handleAnnot(true, 'PC7', 'PC7_annotation', '(TODO: routing_table)', 'pc_7', undefined);

handleAnnot(true, 'R1', 'R1_annotation', '(TODO: routing_table)', 'r_1', undefined);
handleAnnot(true, 'R2', 'R2_annotation', '(TODO: routing_table)', 'r_2', undefined);

createCSSRule('.interreaction_icon', ('position: absolute;' + '\n' +
'background-size: 60%;' + '\n' +
'background-color: white;' + '\n' +
'background-position: center;' + '\n' +
'background-repeat: no-repeat;' + '\n' +
'border-radius: 25px;' + '\n' +
'width: 40px;' + '\n' +
'height: 40px;' + '\n' +
'z-index: 2;' + '\n' +
'cursor: pointer;' + '\n' +
'                  '), false, '');

addHTMLElement('div', 'Cam_PC7', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interreaction_icon', 'Cam_PC7', false);
bindHTMLObject('PC7_eye', 'Cam_PC7', false);
setHTMLElemStyle('left', '-20px', 'Cam_PC7', false);
setHTMLElemStyle('top', '-20px', 'Cam_PC7', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'Cam_PC7', false);
setHTMLElemStyle('backgroundImage', 'url(img/icon/eye-regular.svg)', 'Cam_PC7', false);

addHTMLElement('div', 'Cam_PC1', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interreaction_icon', 'Cam_PC1', false);
bindHTMLObject('PC1_eye', 'Cam_PC1', false);
setHTMLElemStyle('left', '-20px', 'Cam_PC1', false);
setHTMLElemStyle('top', '-20px', 'Cam_PC1', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'Cam_PC1', false);
setHTMLElemStyle('backgroundImage', 'url(img/icon/eye-regular.svg)', 'Cam_PC1', false);

addHTMLElement('div', 'Cam_R1', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interreaction_icon', 'Cam_R1', false);
bindHTMLObject('R1_eye', 'Cam_R1', false);
setHTMLElemStyle('left', '-20px', 'Cam_PC1', false);
setHTMLElemStyle('top', '-20px', 'Cam_PC1', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'Cam_R1', false);
setHTMLElemStyle('backgroundImage', 'url(img/icon/eye-regular.svg)', 'Cam_R1', false);

addHTMLElement('div', 'Cam_R2', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'interreaction_icon', 'Cam_R2', false);
bindHTMLObject('R2_eye', 'Cam_R2', false);
setHTMLElemStyle('left', '-20px', 'Cam_R2', false);
setHTMLElemStyle('top', '-20px', 'Cam_R2', false);
setHTMLElemStyle('backgroundColor', '#B5DFFF', 'Cam_R2', false);
setHTMLElemStyle('backgroundImage', 'url(img/icon/eye-regular.svg)', 'Cam_R2', false);

eventHTMLElem('click', 'Cam_PC7', false, function(event) {
  tweenCamera('Cam_PC7', 'Cam_PC7_lookat', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'Cam_PC7', false);
  setHTMLElemStyle('display', 'block', ['Cam_PC1', 'Cam_R1', 'Cam_R2'], false);
});

eventHTMLElem('click', 'Cam_PC1', false, function(event) {
  tweenCamera('Cam_PC1', 'Cam_PC1_lookat', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'Cam_PC1', false);
  setHTMLElemStyle('display', 'block', ['Cam_PC7', 'Cam_R1', 'Cam_R2'], false);
});

eventHTMLElem('click', 'Cam_R1', false, function(event) {
  tweenCamera('Cam_R1', 'Cam_R1_lookat', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'Cam_R1', false);
  setHTMLElemStyle('display', 'block', ['Cam_PC7', 'Cam_PC1', 'Cam_R2'], false);
});

eventHTMLElem('click', 'Cam_R2', false, function(event) {
  tweenCamera('Cam_R2', 'Cam_R2_lookat', 2, function() {}, 1);
  setHTMLElemStyle('display', 'none', 'Cam_R2', false);
  setHTMLElemStyle('display', 'block', ['Cam_PC7', 'Cam_PC1', 'Cam_R1'], false);
});

createCSSRule('.info_button', ('position: absolute;' + '\n' +
'background-size: 60%;' + '\n' +
'background-color: white;' + '\n' +
'background-position: center;' + '\n' +
'background-repeat: no-repeat;' + '\n' +
'border-radius: 25px;' + '\n' +
'width: 40px;' + '\n' +
'height: 40px;' + '\n' +
'z-index: 2;' + '\n' +
'cursor: pointer;' + '\n' +
'                  '), false, '');

r1_ethernet = false;
r1_IP = false;
pc1_application = false;
pc1_tcp = false;
pc1_IP = false;
pc1_ethernet = false;
r2_ethernet = false;
r2_IP = false;
pc7_application = false;
pc7_tcp = false;
pc7_IP = false;
pc7_ethernet = false;

changeVis('R1_Ethernet_header', false);
changeVis('R1_IP_header', false);
changeVis('PC1_HTTP_header', false);
changeVis('PC1_TCP_header', false);
changeVis('PC1_IP_header', false);
changeVis('PC1_Ethernet_header', false);
changeVis('R2_Ethernet_header', false);
changeVis('R2_IP_header', false);
changeVis('PC7_HTTP_header', false);
changeVis('PC7_TCP_header', false);
changeVis('PC7_IP_header', false);
changeVis('PC7_Ethernet_header', false);

eventHTMLElem('click', 'main_button', true, function(event) {
  tweenCamera('Sun', 'Cam_R1_lookat', 3, function() {}, 0);
  setHTMLElemStyle('display', 'block', ['Cam_PC7', 'Cam_R1', 'Cam_R2'], false);
  setHTMLElemStyle('display', 'block', 'Cam_PC1', false);
});

eventHTMLElem('click', 'r1_encap_button', true, function(event) {
  if (r1_ethernet == false) {
    changeVis('R1_Ethernet_header', true);
    r1_ethernet = true;
  }
});
eventHTMLElem('click', 'r1_encap_button_1', true, function(event) {
  if (r1_IP == false) {
    changeVis('R1_IP_header', true);
    r1_IP = true;
  }
});
eventHTMLElem('click', 'r1_decap_button', true, function(event) {
  if (r1_ethernet == true) {
    changeVis('R1_Ethernet_header', false);
    r1_ethernet = false;
  }
});
eventHTMLElem('click', 'r1_decap_button_1', true, function(event) {
  if (r1_IP == true) {
    changeVis('R1_IP_header', false);
    r1_IP = false;
  }
});

eventHTMLElem('click', 'pc1_encap_button', true, function(event) {
  if (pc1_application == false) {
    changeVis('PC1_HTTP_header', true);
    pc1_application = true;
  }
});
eventHTMLElem('click', 'pc1_encap_button_1', true, function(event) {
  if (pc1_tcp == false) {
    changeVis('PC1_TCP_header', true);
    pc1_tcp = true;
  }
});
eventHTMLElem('click', 'pc1_encap_button_2', true, function(event) {
  if (pc1_IP == false) {
    changeVis('PC1_IP_header', true);
    pc1_IP = true;
  }
});
eventHTMLElem('click', 'pc1_encap_button_3', true, function(event) {
  if (pc1_ethernet == false) {
    changeVis('PC1_Ethernet_header', true);
    pc1_ethernet = true;
  }
});
eventHTMLElem('click', 'pc1_decap_button', true, function(event) {
  if (pc1_application == true) {
    changeVis('PC1_HTTP_header', false);
    pc1_application = false;
  }
});
eventHTMLElem('click', 'pc1_decap_button_1', true, function(event) {
  if (pc1_tcp == true) {
    changeVis('PC1_TCP_header', false);
    pc1_tcp = false;
  }
});
eventHTMLElem('click', 'pc1_decap_button_2', true, function(event) {
  if (pc1_IP == true) {
    changeVis('PC1_IP_header', false);
    pc1_IP = false;
  }
});
eventHTMLElem('click', 'pc1_decap_button_3', true, function(event) {
  if (pc1_ethernet == true) {
    changeVis('PC1_Ethernet_header', false);
    pc1_ethernet = false;
  }
});

eventHTMLElem('click', 'pc7_encap_button', true, function(event) {
  if (pc7_application == false) {
    changeVis('PC7_HTTP_header', true);
    pc7_application = true;
  }
});
eventHTMLElem('click', 'pc7_encap_button_1', true, function(event) {
  if (pc7_tcp == false) {
    changeVis('PC7_TCP_header', true);
    pc7_tcp = true;
  }
});
eventHTMLElem('click', 'pc7_encap_button_2', true, function(event) {
  if (pc7_IP == false) {
    changeVis('PC7_IP_header', true);
    pc7_IP = true;
  }
});
eventHTMLElem('click', 'pc7_encap_button_3', true, function(event) {
  if (pc7_ethernet == false) {
    changeVis('PC7_Ethernet_header', true);
    pc7_ethernet = true;
  }
});
eventHTMLElem('click', 'pc7_decap_button', true, function(event) {
  if (pc7_application == true) {
    changeVis('PC7_HTTP_header', false);
    pc7_application = false;
  }
});
eventHTMLElem('click', 'pc7_decap_button_1', true, function(event) {
  if (pc7_tcp == true) {
    changeVis('PC7_TCP_header', false);
    pc7_tcp = false;
  }
});
eventHTMLElem('click', 'pc7_decap_button_2', true, function(event) {
  if (pc7_IP == true) {
    changeVis('PC7_IP_header', false);
    pc7_IP = false;
  }
});
eventHTMLElem('click', 'pc7_decap_button_3', true, function(event) {
  if (pc7_ethernet == true) {
    changeVis('PC7_Ethernet_header', false);
    pc7_ethernet = false;
  }
});

eventHTMLElem('click', 'r2_encap_button', true, function(event) {
  if (r2_ethernet == false) {
    changeVis('R2_Ethernet_header', true);
    r2_ethernet = true;
  }
});
eventHTMLElem('click', 'r2_encap_button_1', true, function(event) {
  if (r2_IP == false) {
    changeVis('R2_IP_header', true);
    r2_IP = true;
  }
});
eventHTMLElem('click', 'r2_decap_button', true, function(event) {
  if (r2_ethernet == true) {
    changeVis('R2_Ethernet_header', false);
    r2_ethernet = false;
  }
});
eventHTMLElem('click', 'r2_decap_button_1', true, function(event) {
  if (r2_IP == true) {
    changeVis('R2_IP_header', false);
    r2_IP = false;
  }
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
